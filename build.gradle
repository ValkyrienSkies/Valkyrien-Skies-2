plugins {
    // Needed for Forge+Fabric
    id "architectury-plugin" version "3.0.99"
    id "forgified-fabric-loom" version "0.6.79" apply false
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.4.21" apply false
    // Configure SonarQube
    id "org.sonarqube" version "3.1.1"
    // Kotlin linter
    id "org.jlleitschuh.gradle.ktlint" version "10.0.0"
    // Java linter
    id "checkstyle"
}

architectury {
    minecraft = rootProject.minecraft_version
}

// Configure SonarQube
sonarqube {
    properties {
        property "sonar.projectKey", "ValkyrienSkies_Valkyrien-Skies-2"
        property "sonar.organization", "valkyrienskies"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

subprojects {
    apply plugin: "forgified-fabric-loom"
    // Apply checkstyle and ktlint to check the code style of every sub project
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "checkstyle"

    // configure checkstyle
    checkstyle {
        // configure to use checkstyle v8.41
        toolVersion "8.41"
        // Gradle should fail builds on checkstyle errors (not warnings)
        ignoreFailures = false
        // Checkstyle config file is in .checkstyle/checkstyle.xml
        configFile = file("${rootDir}/.checkstyle/checkstyle.xml")
    }

    // configure checkstyle, but different
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    tasks.withType(Checkstyle) {
        reports {
            // Do not output html reports
            html.enabled = false
            // Output xml reports
            xml.enabled = true
        }
    }

    // configure ktlint
    ktlint {
        reporters {
            // configure to output in checkstyle XML format
            reporter "checkstyle"
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"

    // Set the base name, version, and group to the values in the gradle.properties
    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
}
