buildscript {
    // Lock plugin dependencies
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    // Needed for Forge+Fabric
    id "architectury-plugin" version "3.4.143"
    id "dev.architectury.loom" version "1.0.306" apply false
    id 'io.github.juuxel.loom-quiltflower' version '1.8.0' apply false
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.7.10" apply false
    // Kotlin linter
    id "org.jlleitschuh.gradle.ktlint" version "10.3.0"

    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id "com.modrinth.minotaur" version "2.4.3" apply false

    // Java linter
    id "checkstyle"
}

// Determine the version
if (project.hasProperty("CustomReleaseVersion")) {
    // Remove release/ from the version if present
    version = project.property("CustomReleaseVersion").replaceFirst("^release/", "")
} else {
    String gitRevision = "git rev-parse HEAD".execute().text.trim()

    version = mod_version + "+" + gitRevision.substring(0, 10)
}

architectury {
    minecraft = rootProject.minecraft_version
}

// Lock dependencies
// https://docs.gradle.org/current/userguide/dependency_locking.html
dependencyLocking {
    lockAllConfigurations()
}

// Determine the version of vs-core
String vsCoreGitRevision = "git rev-parse HEAD".execute(null, gradle.includedBuild("vs-core").projectDir).text.trim()
ext.vs_core_version = "1.1.0+" + vsCoreGitRevision.substring(0, 10)

subprojects {
    apply plugin: "dev.architectury.loom"
    // Apply checkstyle and ktlint to check the code style of every sub project
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "checkstyle"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "io.github.juuxel.loom-quiltflower"

    repositories {
        mavenCentral()
        maven {
            name = "Valkyrien Skies Internal"
            url = project.vs_maven_url ?: 'https://maven.valkyrienskies.org'
            if (project.vs_maven_username && project.vs_maven_password) {
                credentials {
                    username = project.vs_maven_username
                    password = project.vs_maven_password
                }
            }
        }
        if (!project.block_external_repositories) {
            mavenLocal()
            maven {
                name = "ParchmentMC"
                url = "https://maven.parchmentmc.org"
            }
            maven { url = "https://cursemaven.com" }
            maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
            maven {
                name = 'Kotlin for Forge'
                url = 'https://thedarkcolour.github.io/KotlinForForge/'
            }
            maven {
                name = 'tterrag maven'
                url = 'https://maven.tterrag.com/'
            }
            maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Suggestion Tweaker
            maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
            maven { url = "https://mvn.devos.one/snapshots/" } // Fabric Create, Porting Lib, Forge Tags, Milk Lib
            maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
            maven { url = "https://maven.tterrag.com/" } // Registrate, Forge Create and Flywheel
            maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
            maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        }
    }

    // Remove automatically added repos
    if (project.block_external_repositories) {
        repositories.removeIf {
            def url = it.url.toString()
            url.contains("maven.minecraftforge.net") ||
                url.contains("maven.fabricmc.net") ||
                url.contains("maven.architectury.dev")
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()

        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
    }

    // configure checkstyle
    checkstyle {
        // configure to use checkstyle v8.41
        toolVersion "8.45.1"
        // Gradle should fail builds on checkstyle errors (not warnings)
        ignoreFailures = true
        // Checkstyle config file is in .checkstyle/checkstyle.xml
        configFile = file("${rootDir}/.checkstyle/checkstyle.xml")
    }

    // configure checkstyle, but different
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    tasks.withType(Checkstyle) {
        reports {
            // Do not output html reports
            html.enabled = false
            // Output xml reports
            xml.enabled = true
        }
    }

    // configure ktlint
    ktlint {
        reporters {
            // configure to output in checkstyle XML format
            reporter "checkstyle"
        }
        ignoreFailures = true
        disabledRules = ["parameter-list-wrapping"]
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    // Set the base name, version, and group to the values in the gradle.properties
    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version
    group = rootProject.maven_group

    publishing {
        repositories {
            if (project.vs_maven_username && project.vs_maven_password) {
                println "Publishing to VS Maven ($version)"
                maven {
                    name = "VSMaven"
                    url = project.vs_maven_url
                    credentials {
                        username = project.vs_maven_username
                        password = project.vs_maven_password
                    }
                }
            }
            if (System.getenv("GITHUB_ACTOR") != null) {
                println "Publishing to Github Packages ($version)"
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/ValkyrienSkies/Valkyrien-Skies-2")
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
