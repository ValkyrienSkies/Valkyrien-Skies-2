buildscript {
    // Lock plugin dependencies
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    // Needed for Forge+Fabric
    id "architectury-plugin" version "3.4.146"
    id "dev.architectury.loom" version "1.3.355" apply false
    id 'io.github.juuxel.loom-vineflower' version '1.11.0' apply false
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.9.10" apply false
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
    id "com.modrinth.minotaur" version "2.4.3" apply false
}

// Determine the version
if (project.hasProperty("CustomReleaseVersion")) {
    // Remove release/ from the version if present
    version = project.property("CustomReleaseVersion").replaceFirst("^release/", "")
} else {
    String gitRevision = "git rev-parse HEAD".execute().text.trim()

    version = mod_version + "+" + gitRevision.substring(0, 10)
}

architectury {
    minecraft = rootProject.minecraft_version
}

// Lock dependencies
// https://docs.gradle.org/current/userguide/dependency_locking.html
dependencyLocking {
    lockAllConfigurations()
}

tasks.register("updateVsCore") {
    File versionFile = null
    File gradleProperties = file("gradle.properties")

    try {
        def vsCoreBuild = gradle.includedBuild("vs-core")
        versionFile = new File(vsCoreBuild.projectDir, "api-game/build/version.txt")

        inputs.file(versionFile)
        outputs.file(gradleProperties)
        dependsOn(vsCoreBuild.task(":api-game:writeVersion"))

        [':impl', ':api', ':api-game', ':util'].each {
            dependsOn(vsCoreBuild.task("${it}:publishToMavenLocal"))
        }
    } catch (UnknownDomainObjectException ignore) {}

    onlyIf {
        versionFile != null
    }

    doLast {
        def vsCoreVersion = versionFile.text
        def newGradleProperties = gradleProperties.text.replaceFirst("(?m)^vs_core_version=.*", "vs_core_version=" + vsCoreVersion)
        gradleProperties.write(newGradleProperties)
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    // Apply checkstyle and ktlint to check the code style of every sub project
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "io.github.juuxel.loom-vineflower"

    configurations.each { it.resolutionStrategy.useGlobalDependencySubstitutionRules.set(false) }

    repositories {
        try {
            def vsCoreBuild = gradle.includedBuild("vs-core")
            mavenLocal {
                content {
                    includeGroup("org.valkyrienskies.core")
                }
            }

            [':impl', ':api', ':api-game'].each {
                compileJava.dependsOn(vsCoreBuild.task("${it}:publishToMavenLocal"))
            }
        } catch (UnknownDomainObjectException ignore) {}

        mavenCentral()
        maven {
            url "https://cursemaven.com"
            content {
                includeModule "curse.maven", "kotlinforforge-351264"
            }
        }
        if (!project.block_external_repositories) {
            mavenLocal()
            maven {
                name = "ParchmentMC"
                url = "https://maven.parchmentmc.org"
            }
            maven { url = "https://cursemaven.com" }
            maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
            maven {
                name = 'Kotlin for Forge'
                url = 'https://thedarkcolour.github.io/KotlinForForge/'
            }
            maven {
                name = 'tterrag maven'
                url = 'https://maven.tterrag.com/'
            }
            maven { url = "https://api.modrinth.com/maven" } // LazyDFU, Suggestion Tweaker, Create Big Cannons
            maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
            maven { url "https://maven.architectury.dev/" }
            maven { url = "https://mvn.devos.one/snapshots/" } // Fabric Create, Porting Lib, Forge Tags, Milk Lib
            maven { url = "https://mvn.devos.one/releases/" }
            maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
            maven { url = "https://maven.tterrag.com/" } // Registrate, Forge Create and Flywheel
            maven { url = "https://maven.cafeteria.dev/releases" } // Fake Player API
            maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
        }
        maven {
            name = "Valkyrien Skies Internal"
            url = project.vs_maven_url ?: 'https://maven.valkyrienskies.org'
            if (project.vs_maven_username && project.vs_maven_password) {
                credentials {
                    username = project.vs_maven_username
                    password = project.vs_maven_password
                }
            }
        }
    }

    // Remove automatically added repos
    if (project.block_external_repositories) {
        repositories.removeIf {
            def url = it.url.toString()
            url.contains("maven.minecraftforge.net") ||
                url.contains("maven.fabricmc.net") ||
                url.contains("maven.architectury.dev")
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()

        compileOnly("com.google.code.findbugs:jsr305:3.0.2")
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    // Set the base name, version, and group to the values in the gradle.properties
    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version
    group = rootProject.maven_group

    publishing {
        repositories {
            if (project.vs_maven_username && project.vs_maven_password) {
                println "Publishing to VS Maven ($version)"
                maven {
                    name = "VSMaven"
                    url = project.vs_maven_url
                    credentials {
                        username = project.vs_maven_username
                        password = project.vs_maven_password
                    }
                }
            }
            if (System.getenv("GITHUB_ACTOR") != null) {
                println "Publishing to Github Packages ($version)"
                maven {
                    name = "GitHubPackages"
                    url = uri("https://maven.pkg.github.com/ValkyrienSkies/Valkyrien-Skies-2")
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        options.release = 17
    }

    java {
        withSourcesJar()
    }
}
