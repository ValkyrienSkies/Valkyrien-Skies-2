buildscript {
    // Lock plugin dependencies
    configurations.classpath {
        resolutionStrategy.activateDependencyLocking()
    }
}

plugins {
    // Needed for Forge+Fabric
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "0.12.0.289" apply false
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1' apply false
    // Kotlin
    id "org.jetbrains.kotlin.jvm" version "1.7.10" apply false
    // Kotlin linter
    id "org.jlleitschuh.gradle.ktlint" version "10.3.0"
    // Java linter
    id "checkstyle"
}

// Determine the version
if (project.hasProperty("CustomReleaseVersion")) {
    version = project.property("CustomReleaseVersion") as String
} else {
    // Yes, I know there is a gradle plugin to detect git version.
    // But its made by Palantir 0_0.
    Process gitRevisionProcess = Runtime.getRuntime().exec("git rev-parse HEAD", new String[0], projectDir)
    InputStream processInputStream = gitRevisionProcess.inputStream

    String gitRevision = ""
    while (true) {
        int lastReadByte = processInputStream.read()
        if (lastReadByte == -1) break
        gitRevision += ((char) lastReadByte)
    }
    version = "1.0.0+" + gitRevision.substring(0, 10)
}

architectury {
    minecraft = rootProject.minecraft_version
}

// Lock dependencies
// https://docs.gradle.org/current/userguide/dependency_locking.html
dependencyLocking {
    lockAllConfigurations()
}

// Determine the version of vs-core
Process gitRevisionProcess = Runtime.getRuntime().exec("git rev-parse HEAD", new String[0], gradle.includedBuild("vs-core").projectDir)
InputStream processInputStream = gitRevisionProcess.inputStream
String gitRevision = ""
while (true) {
    int lastReadByte = processInputStream.read()
    if (lastReadByte == -1) break
    gitRevision += ((char) lastReadByte)
}
ext.vs_core_version = "1.0.0+" + gitRevision.substring(0, 10)

subprojects {
    apply plugin: "dev.architectury.loom"
    // Apply checkstyle and ktlint to check the code style of every sub project
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "checkstyle"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "io.github.juuxel.loom-quiltflower"

    repositories {
        mavenCentral()
        maven {
            name = "Valkyrien Skies Internal"
            url = project.findProperty('vs_maven_url') ?: 'https://maven.valkyrienskies.org'

            if (project.hasProperty('vs_maven_username') && project.hasProperty('vs_maven_url')) {
                credentials {
                    username = project.findProperty('vs_maven_username')
                    password = project.findProperty('vs_maven_password')
                }
            }
        }
        maven {
            name = "Jitpack"
            url = "https://jitpack.io"
        }
        maven {
            name = "ParchmentMC"
            url = "https://maven.parchmentmc.org"
        }
        mavenLocal()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.16.5:2022.03.06@zip")
        }
    }

    // configure checkstyle
    checkstyle {
        // configure to use checkstyle v8.41
        toolVersion "8.41"
        // Gradle should fail builds on checkstyle errors (not warnings)
        ignoreFailures = false
        // Checkstyle config file is in .checkstyle/checkstyle.xml
        configFile = file("${rootDir}/.checkstyle/checkstyle.xml")
    }

    // configure checkstyle, but different
    // https://docs.gradle.org/current/userguide/checkstyle_plugin.html
    tasks.withType(Checkstyle) {
        reports {
            // Do not output html reports
            html.enabled = false
            // Output xml reports
            xml.enabled = true
        }
    }

    // configure ktlint
    ktlint {
        reporters {
            // configure to output in checkstyle XML format
            reporter "checkstyle"
        }
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    // Set the base name, version, and group to the values in the gradle.properties
    archivesBaseName = rootProject.archives_base_name
    version = rootProject.version
    group = rootProject.maven_group

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        options.release = 8
    }

    java {
        withSourcesJar()
    }
}
