
dependencies {
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    // We depend on fabric loader here to use the fabric @Environment annotations
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    modApi("me.shedaniel.cloth:cloth-config:${cloth_config_version}")

    modCompileOnly("maven.modrinth:sodium:${sodium_version}")

    // vs-core
    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
    }

    implementation("org.valkyrienskies.core:util:${rootProject.vs_core_version}")

    // FTB Stuffs
    modCompileOnly("dev.ftb.mods:ftb-chunks-forge:2001.3.6") { transitive = false }

    // Weather2 1.20.1
    modCompileOnly("curse.maven:weather-storms-tornadoes-237746:5244118")

    // TIS-3d
    modCompileOnly("maven.modrinth:tis3d:${tis3d_version}")


    //Common create compat,
    //We just use a version from a platform and hope the classes exist on both versions and mixins apply correctly
    modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
        { exclude group: 'com.github.AlphaMode', module: 'fakeconfigtoml' }
    modCompileOnly("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
    modCompileOnly("net.createmod.ponder:Ponder-Fabric-${minecraft_version}:${ponder_version_fabric}") { transitive = false }
    modCompileOnly("net.createmod.ponder:Ponder-Common-${minecraft_version}:${ponder_version_fabric}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-fabric-api-${minecraft_version}:${flywheel_version_fabric}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-fabric-${minecraft_version}:${flywheel_version_fabric}")

    modCompileOnly("com.rbasamoyai:createbigcannons:${createbigcannons_version}+mc.${minecraft_version}-fabric") { transitive = false }
}

architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/valkyrienskies-common.accesswidener")
}

jar {
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java

            artifact(jar) {
                classifier 'dev'
            }
        }
    }
}
