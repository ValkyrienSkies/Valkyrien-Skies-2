
dependencies {
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))

    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'
    // We depend on fabric loader here to use the fabric @Environment annotations
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"

    // Add NeoForge to the compile classpath
    compileOnly("net.neoforged:neoforge:$rootProject.neoforge_version")

    modApi("me.shedaniel.cloth:cloth-config:${cloth_config_version}")

    modCompileOnly("maven.modrinth:sodium:${sodium_version}")

    // vs-core
    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
    }
    implementation("org.valkyrienskies.core:api:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}")
    implementation("org.valkyrienskies.core:util:${rootProject.vs_core_version}")

    // FTB Stuffs
    modCompileOnly("curse.maven:ftb-util-404465:4210935")
    modCompileOnly("curse.maven:ftb-teams-404468:4229138")
    modCompileOnly("curse.maven:ftb-chunks-314906:4229120")

    // EMF compat
    modCompileOnly("curse.maven:entity-model-features-844662:5696901")
    modCompileOnly("curse.maven:entity-texture-features-fabric-568563:5697084")

    // Weather2 1.20.1
    modCompileOnly("curse.maven:weather-storms-tornadoes-237746:5244118")

    // Common create compat,
    // We just use a version from a platform and hope the classes exist on both versions and mixins apply correctly

    // Use Forge for now since Fabric isn't available yet
    modCompileOnly("com.simibubi.create:create-${property("minecraft_version")}:${property("forge_create_version")}:slim") { transitive = false }
    modCompileOnly("net.createmod.ponder:Ponder-NeoForge-${property("minecraft_version")}:${property("forge_ponder_version")}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${property("minecraft_version")}:${property("forge_flywheel_version")}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-neoforge-${property("minecraft_version")}:${property("forge_flywheel_version")}")
    modCompileOnly("com.tterrag.registrate:Registrate:${property("forge_registrate_version")}")

    // modCompileOnly("com.simibubi.create:create-fabric-${minecraft_version}:${create_fabric_version}")
    //     { exclude group: 'com.github.AlphaMode', module: 'fakeconfigtoml' }
    modCompileOnly("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")
    // modCompileOnly("com.jozufozu.flywheel:flywheel-fabric-${minecraft_version}:${flywheel_version_fabric}")

    // modCompileOnly("maven.modrinth:create-big-cannons:${createbigcannons_version}")

    // modCompileOnly("maven.modrinth:create-utilities:${create_utilities_version}")
    modImplementation("teamreborn:energy:${energy_version}")
    // modCompileOnly("io.github.fabricators_of_create:Porting-Lib:${port_lib_version}+${minecraft_version}")

    //Bluemap fabric 1.20.1
    modCompileOnly("curse.maven:bluemap-406463:5555756")

    modCompileOnly("com.github.iPortalTeam:ImmersivePortalsMod:${immptl_version}")
}

architectury {
    common(rootProject.enabled_platforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/valkyrienskies-common.accesswidener")
}

jar {
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java

            artifact(jar) {
                classifier 'dev'
            }
        }
    }
}
