plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jetbrains.kotlin.jvm"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

dependencies {
    include(annotationProcessor(implementation("com.github.LlamaLad7:MixinExtras:0.1.1")))

    modImplementation("net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}")

    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }

    // Depend on the fabric kotlin mod
    include(modImplementation("net.fabricmc:fabric-language-kotlin:1.8.5+kotlin.1.7.20"))
    include(modImplementation("me.shedaniel.cloth:cloth-config-fabric:6.3.81"))

    modImplementation("curse.maven:sodium-394468:3669187")
    modImplementation("com.terraformersmc:modmenu:3.2.3")

    // Depend on the fabric API
    modImplementation("net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}")


    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
        exclude module: "kotlin-stdlib-jdk8"
    }
    // Shade vs-core
    shadowCommon("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
        exclude module: "kotlin-stdlib-jdk8" // Don't shade kotlin-stdlib-jdk8, even though vs-core depends on it
    }

    // CC Restitched
    modImplementation("curse.maven:cc-restitched-462672:3838648")

    // Create compat
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:${create_version}+${minecraft_version}") { transitive = false }
    modImplementation("com.jozufozu.flywheel:flywheel-fabric-${minecraft_version}:${flywheel_version}")
    modImplementation("com.tterrag.registrate_fabric:Registrate:${registrate_version}")
    modImplementation("io.github.fabricators_of_create:Porting-Lib:${port_lib_version}+${minecraft_version}")
    modImplementation("me.alphamode:ForgeTags:${forge_tags_version}")
    modImplementation("net.minecraftforge:forgeconfigapiport-fabric:${forge_config_api_port_version}")
    modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${reach_entity_attributes_version}")
    modImplementation("dev.cafeteria:fake-player-api:${fake_player_api_version}")
    modImplementation("io.github.tropheusj:milk-lib:${milk_lib_version}")
}

// Copy the VS common access widener to the generated resources folder
//
// Note: We have to do this because fabric can't find the access widener unless its in the fabric project
File generatedResourcesDir = file("src/generated/resources")
tasks.register("copyAccessWidener", Copy) {
    from(project(":common").file("src/main/resources/valkyrienskies-common.accesswidener"))
    into(generatedResourcesDir)
}

// Add [generatedResourcesDir] as a folder to search for resources
sourceSets {
    main {
        resources {
            srcDir(generatedResourcesDir)
        }
    }
}

processResources {
    dependsOn("copyAccessWidener")
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE // Ignore duplicate valkyrienskies-common.accesswidener files
    dependencies {
        exclude(dependency("org.jetbrains.kotlin:.*:.*")) // Don't shade kotlin!
    }
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
    duplicatesStrategy DuplicatesStrategy.EXCLUDE // Ignore duplicate valkyrienskies-common.accesswidener files
}

jar {
    classifier "dev"
    duplicatesStrategy DuplicatesStrategy.EXCLUDE // Ignore duplicate valkyrienskies-common.accesswidener files
}

sourcesJar {
    duplicatesStrategy DuplicatesStrategy.EXCLUDE // Ignore duplicate valkyrienskies-common.accesswidener files
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

// Publish to Mavens
publishing {
    publications {
        mavenFabric(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            // Publish the dev shadow jar to maven
            artifact(shadowJar) {
                classifier "dev-shadow"
            }
            from components.java
        }
    }
}
