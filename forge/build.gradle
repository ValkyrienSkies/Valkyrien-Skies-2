import org.jetbrains.kotlin.gradle.dsl.JvmTarget

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    mixin {
        useLegacyMixinAp = true
        defaultRefmapName = "valkyrienskies-refmap.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    core
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
    compileClasspath.extendsFrom core
    forgeRuntimeLibrary.extendsFrom core
    shadowCommon.extendsFrom core
}

dependencies {
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    // implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))
    annotationProcessor("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5") // use fabric mixin so we can write interface injectors (conditionally loaded if mixinbooster is enabled)

    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) {
        transitive = false
    }

    //modCompileOnly("curse.maven:rubidium-574856:4024781")
    modCompileOnly("maven.modrinth:embeddium:${embeddium_version}")

    // Twilight Forest
    // modImplementation("teamtwilight:twilightforest:${twilightforest_version}:universal")

    // Create Mod, see https://wiki.createmod.net/developers/depend-on-create/neoforge-1.21.1
    modImplementation("com.simibubi.create:create-${property("minecraft_version")}:${property("forge_create_version")}:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-NeoForge-${property("minecraft_version")}:${property("forge_ponder_version")}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${property("minecraft_version")}:${property("forge_flywheel_version")}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${property("minecraft_version")}:${property("forge_flywheel_version")}")
    modImplementation("com.tterrag.registrate:Registrate:${property("forge_registrate_version")}")

    // Weather2 1.20.1
    // Not on 1.21.1 yet
    // modImplementation("curse.maven:weather-storms-tornadoes-237746:5244118")
    // modImplementation("curse.maven:coroutil-237749:5096038")

    // CC Tweaked
    modCompileOnly("maven.modrinth:cc-tweaked:${cc_tweaked_version}")

    // EMF compat
    // https://www.curseforge.com/minecraft/mc-mods/entity-model-features/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:entity-model-features-844662:6001147")
    // https://www.curseforge.com/minecraft/mc-mods/entity-texture-features-fabric/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:entity-texture-features-fabric-568563:5982151")

    // Not on 1.21.1 yet
    // modCompileOnly("maven.modrinth:create-utilities:0.2.0+1.20.1")
    modCompileOnly("teamreborn:energy:${energy_version}") {
        transitive = false
    }
    // TIS-3d
    modCompileOnly("maven.modrinth:tis3d:${tis3d_version}")

    // Modular Routers
    // https://www.curseforge.com/minecraft/mc-mods/modular-routers/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:modular-routers-250294:6130459")

    // Integrated Dynamics
    // https://www.curseforge.com/minecraft/mc-mods/integrated-dynamics/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:integrated-dynamics-236307:6250036")
    modCompileOnly("curse.maven:cyclops-core-232758:6230091")
    modCompileOnly("curse.maven:common-capabilities-247007:5980086")

    // Mekanism
    modCompileOnly ("curse.maven:mekanism-268560:6242484")

    // Kotlin for Forge
    forgeRuntimeLibrary(implementation("thedarkcolour:kotlinforforge-neoforge:${kotlin_for_forge_version}"))

    // Cloth for config
    include(modImplementation("me.shedaniel.cloth:cloth-config-neoforge:${cloth_config_version}"))

    forgeRuntimeLibrary(implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
        exclude module: "kotlin-stdlib-jdk8"
    })
    forgeRuntimeLibrary(include("com.fasterxml:classmate:1.5.1"))

    // Shade vs-core
    shadowCommon("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude module: "netty-buffer"
        exclude module: "fastutil"
        exclude module: "kotlin-stdlib-jdk8" // Don't shade kotlin-stdlib-jdk8, even though vs-core depends on it
        exclude group: "com.google.guava"
        exclude module: "jsonschema.module.addon"
    }
}

// I don't know why, but this is the only way gradle can launch it
tasks.runClient.configure {
    jvmArgs '-Dkotlinx.coroutines.debug=off'
}

tasks.runServer.configure {
    jvmArgs '-Dkotlinx.coroutines.debug=off'
}

processResources {
    inputs.property "version", project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    atAccessWideners.add "valkyrienskies-common.accesswidener"
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)
compileKotlin.compilerOptions.jvmTarget = JvmTarget.JVM_21

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            // Publish the dev shadow jar to maven
            artifact(shadowJar) {
                classifier "dev-shadow"
            }
            from components.java
        }
    }
}
