buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // Make sure this version matches the one included in Kotlin for Forge
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:2.1.10'
        // OPTIONAL Gradle plugin for Kotlin Serialization
        classpath 'org.jetbrains.kotlin:kotlin-serialization:2.1.10'
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "org.jetbrains.kotlin.jvm"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

apply from: '../gradle-scripts/publish-curseforge.gradle'

architectury {
    platformSetupLoomIde()
    neoForge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    mixin {
        useLegacyMixinAp = true
        defaultRefmapName = "valkyrienskies-refmap.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    core
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
    compileClasspath.extendsFrom core
    forgeRuntimeLibrary.extendsFrom core
    shadowCommon.extendsFrom core
}

dependencies {
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.5"))
    // implementation(include("io.github.llamalad7:mixinextras-forge:0.3.5"))
    annotationProcessor("net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5") // use fabric mixin so we can write interface injectors (conditionally loaded if mixinbooster is enabled)

    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) {
        transitive = false
    }

    //modCompileOnly("curse.maven:rubidium-574856:4024781")
    modCompileOnly("maven.modrinth:embeddium:${embeddium_version}")

    // Twilight Forest
    // modImplementation("teamtwilight:twilightforest:${twilightforest_version}:universal")

    // Create Mod, see https://wiki.createmod.net/developers/depend-on-create/neoforge-1.21.1
    modImplementation("com.simibubi.create:create-${property("minecraft_version")}:${property("forge_create_version")}:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-NeoForge-${property("minecraft_version")}:${property("forge_ponder_version")}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${property("minecraft_version")}:${property("forge_flywheel_version")}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${property("minecraft_version")}:${property("forge_flywheel_version")}")
    modImplementation("com.tterrag.registrate:Registrate:${property("forge_registrate_version")}")

    // Weather2 1.20.1
    // Not on 1.21.1 yet
    // modImplementation("curse.maven:weather-storms-tornadoes-237746:5244118")
    // modImplementation("curse.maven:coroutil-237749:5096038")

    // CC Tweaked
    modCompileOnly("maven.modrinth:cc-tweaked:${cc_tweaked_version}")

    // EMF compat
    // https://www.curseforge.com/minecraft/mc-mods/entity-model-features/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:entity-model-features-844662:6001147")
    // https://www.curseforge.com/minecraft/mc-mods/entity-texture-features-fabric/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:entity-texture-features-fabric-568563:5982151")

    // Not on 1.21.1 yet
    // modCompileOnly("maven.modrinth:create-utilities:0.2.0+1.20.1")
    modImplementation("teamreborn:energy:${energy_version}") {
        transitive = false
    }
    // TIS-3d
    modCompileOnly("maven.modrinth:tis3d:${tis3d_version}")

    // Modular Routers
    // https://www.curseforge.com/minecraft/mc-mods/modular-routers/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:modular-routers-250294:6130459")

    // Integrated Dynamics
    // https://www.curseforge.com/minecraft/mc-mods/integrated-dynamics/files/all?page=1&pageSize=20&version=1.21.1
    modCompileOnly("curse.maven:integrated-dynamics-236307:6250036")
    modCompileOnly("curse.maven:cyclops-core-232758:6230091")
    modCompileOnly("curse.maven:common-capabilities-247007:5980086")

    // Mekanism
    modCompileOnly ("curse.maven:mekanism-268560:6242484")

    // Kotlin for Forge
    implementation("thedarkcolour:kotlinforforge-neoforge:${kotlin_for_forge_version}")
    // modCompileOnly("thedarkcolour:kotlinforforge-neoforge:${kotlin_for_forge_version}")
    forgeRuntimeLibrary("thedarkcolour:kotlinforforge-neoforge:${kotlin_for_forge_version}")

    // Cloth for config
    include(modImplementation("me.shedaniel.cloth:cloth-config-forge:${cloth_config_version}"))

    // Shade vs-core
    implementation("org.valkyrienskies.core:impl:${rootProject.vs_core_version}"){
        exclude group: 'org.joml', module: 'joml'
    }
    forgeRuntimeLibrary shadowCommon("org.valkyrienskies.core:impl:${rootProject.vs_core_version}") {
        exclude group: 'org.joml', module: 'joml'
        transitive = false
    }


    // region Manually include every single dependency of vs-core (total meme)
    forgeRuntimeLibrary include("org.valkyrienskies.core:api:${rootProject.vs_core_version}") {
        exclude group: 'org.joml', module: 'joml'
        transitive = false
    }

    forgeRuntimeLibrary shadowCommon("org.valkyrienskies.core:api-game:${rootProject.vs_core_version}") {
        exclude group: 'org.joml', module: 'joml'
        transitive = false
    }

    forgeRuntimeLibrary include("org.valkyrienskies.core:util:${rootProject.vs_core_version}") {
        exclude group: 'org.joml', module: 'joml'
        transitive = false
    }

    forgeRuntimeLibrary shadowCommon("org.valkyrienskies:physics_api_krunch:1.0.0+7db6a103f1") {
        exclude group: 'org.joml', module: 'joml'
        transitive = false
    }

    forgeRuntimeLibrary shadowCommon("org.valkyrienskies:physics_api:1.0.0+0ba0cc41e1") {
        exclude group: 'org.joml', module: 'joml'
        transitive = false
    }

    forgeRuntimeLibrary include("javax.inject:javax.inject:1") { transitive = false }

    // JOML for Math
    forgeRuntimeLibrary include("org.joml:joml-primitives:1.10.0")

    // Apache Commons Math for Linear Programming
    forgeRuntimeLibrary include("org.apache.commons:commons-math3:3.6.1") { transitive = false }

    // Jackson Binary Dataformat for Object Serialization
    def jacksonVersion = '2.14.0'
    // forked to remove module-info
    forgeRuntimeLibrary include("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion-rubyfork") { transitive = false }
    forgeRuntimeLibrary include("com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary include("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary include("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary include("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary include("com.fasterxml.jackson.core:jackson-core:$jacksonVersion") { transitive = false }
    forgeRuntimeLibrary include("com.github.Rubydesic:jackson-kotlin-dsl:1.2.0") { transitive = false }

    forgeRuntimeLibrary include("com.networknt:json-schema-validator:1.0.71") { transitive = false }
    forgeRuntimeLibrary include("com.ethlo.time:itu:1.7.0") { transitive = false }
    forgeRuntimeLibrary include("com.github.victools:jsonschema-module-jackson:4.25.0") { transitive = false }
    forgeRuntimeLibrary include("com.github.victools:jsonschema-generator:4.25.0") { transitive = false }
    forgeRuntimeLibrary include("com.fasterxml:classmate:1.5.1") { transitive = false }
    forgeRuntimeLibrary include("com.flipkart.zjsonpatch:zjsonpatch:0.4.11") { transitive = false }
    forgeRuntimeLibrary include("org.apache.commons:commons-collections4:4.3") { transitive = false }

    forgeRuntimeLibrary include("com.google.dagger:dagger:2.43.2") { transitive = false }

    // endregion
}

processResources {
    inputs.property "version", project.version

    // TODO: Change this?
    filesMatching('META-INF/neoforge.mods.toml') {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    // Exclude dummy Optifine classes
    exclude "net/optifine/**"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

compileKotlin {
    kotlinOptions.jvmTarget = '21'
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            groupId = "org.valkyrienskies"
            version = project.version
            artifactId = rootProject.archives_base_name + "-" + project.name
            // Publish the dev shadow jar to maven
            artifact(shadowJar) {
                classifier "dev-shadow"
            }
            from components.java
        }
    }
}
